<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>golang内置类型和函数</title>
    <url>/2021/01/07/golang%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>#</p>
<h1 id="1-Golang"><a href="#1-Golang" class="headerlink" title="1. Golang"></a><strong>1. Golang</strong></h1><h1 id="内置类型和函数"><a href="#内置类型和函数" class="headerlink" title="内置类型和函数"></a><strong>内置类型和函数</strong></h1><h2 id="1-1-内置类型"><a href="#1-1-内置类型" class="headerlink" title="1.1.  内置类型"></a><strong>1.1.</strong>  <strong>内置类型</strong></h2><h3 id="1-1-1-值类型："><a href="#1-1-1-值类型：" class="headerlink" title="1.1.1.  值类型："></a><strong>1.1.1.</strong>  <strong>值类型：</strong></h3><p>bool</p>
<p>int(32 or 64), int8, int16, int32, int64</p>
<p>uint(32 or 64), uint8(byte), uint16, uint32, uint64</p>
<p>float32, float64</p>
<p>string</p>
<p>complex64, complex128</p>
<p>array – 固定长度的数组</p>
<h3 id="1-1-2-引用类型：-指针类型"><a href="#1-1-2-引用类型：-指针类型" class="headerlink" title="1.1.2.  引用类型：** ( 指针类型 )**"></a><strong>1.1.2.</strong>  <strong>引用类型：**</strong> ( <strong><strong>指针类型</strong></strong> )**</h3><p>slice – 序列数组(最常用)</p>
<p>map – 映射</p>
<p>chan – 管道</p>
<h2 id="1-2-内置函数"><a href="#1-2-内置函数" class="headerlink" title="1.2.  内置函数"></a><strong>1.2.</strong>  <strong>内置函数</strong></h2><p>Go 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如：len、cap 和 append，或必须用于系统级的操作，例如：panic。因此，它们需要直接获得编译器的支持。</p>
<p>append – 用来追加元素到数组、slice中,返回修改后的数组、slice</p>
<p>close – 主要用来关闭channel</p>
<p>delete – 从map中删除key对应的value</p>
<p>panic – 停止常规的goroutine （panic和recover：用来做错误处理）</p>
<p>recover – 允许程序定义goroutine的panic动作</p>
<p>real – 返回complex的实部 （complex、real imag：用于创建和操作复数）</p>
<p>imag – 返回complex的虚部</p>
<p>make – 用来分配内存，返回Type本身(只能应用于slice, map, channel)</p>
<p>new – 用来分配内存，主要用来分配值类型，比如int、struct。返回指向Type的指针</p>
<p>cap – capacity是容量的意思，用于返回某个类型的最大容量（只能用于切片和 map）</p>
<p>copy – 用于复制和连接slice，返回复制的数目</p>
<p>len – 来求长度，比如string、array、slice、map、channel ，返回长度</p>
<p>print、println – 底层打印函数，在部署环境中建议使用 fmt 包</p>
<h2 id="1-3-内置接口-error"><a href="#1-3-内置接口-error" class="headerlink" title="1.3.  内置接口** error**"></a><strong>1.3.</strong>  <strong>内置接口**</strong> error**</h2><p>type error interface { //只要实现了Error()函数，返回值为String的都实现了err接口</p>
<p>Error() String</p>
<p>}</p>
]]></content>
  </entry>
  <entry>
    <title>内置对象</title>
    <url>/2020/04/18/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>
<p>title: 内置函数<br>date: 2019-1-1 13:12:57<br>categories:</p>
<ul>
<li>web前端<br>tags:</li>
<li>web前端</li>
<li>内置对象</li>
<li>创建对象的三种方法</li>
<li>构造函数和对象的相互联系</li>
</ul>
<hr>
<h4 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h4>]]></content>
  </entry>
  <entry>
    <title>new关键字</title>
    <url>/2019/12/30/new%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h4><p>1.new构造函数可以在内存中创建一个空的对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Star(uname,age,sex)&#123;</span><br><span class="line">    this.name &#x3D; unmae;</span><br><span class="line">    this.age &#x3D; age;</span><br><span class="line">    this.sex &#x3D; sex;</span><br><span class="line">&#125;</span><br><span class="line">var ldh &#x3D; new Star(&#39;刘&#39;,18,&#39;男&#39;);</span><br></pre></td></tr></table></figure>
<p>2.this就会指向刚刚创建的空对象。</p>
<p>3.执行构造函数里面的代码，给这个空对象添加属性和方法.</p>
<p>4.返回这个对象（new的作用），所以构造函数里面不需要return.</p>
<h5 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h5><p>因为属性是无序的，所以无法使用for循环</p>
<blockquote>
<p>for …in语句用于对数组或者对象（最合适的）的属性进行循环操作.</p>
</blockquote>
<p>使用方法</p>
<blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(变量 in 对象)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">例子：</span><br><span class="line">var obj &#x3D; &#123;</span><br><span class="line">    name : &#39;ldh&#39;;</span><br><span class="line">    gae : 18;</span><br><span class="line">    sex : &#39;男&#39;</span><br><span class="line">&#125;</span><br><span class="line">for(var K in obj)&#123;</span><br><span class="line">    consloe.log(obj[K]); &#x2F;&#x2F;对象名[变量],obj[K]得到是属性值</span><br><span class="line">    &#x2F;&#x2F;我们使用for...in 里面的变量我们喜欢写K或者Key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>new关键字</tag>
        <tag>遍历对象</tag>
      </tags>
  </entry>
  <entry>
    <title>对象</title>
    <url>/2019/12/30/%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象是一个具体的事物，是由属性和方法组成的。</p>
<p><strong>属性</strong></p>
<blockquote>
<p>事物的特征，在对象中用属性来表示（常用名词）</p>
</blockquote>
<p><strong>方法</strong></p>
<blockquote>
<p>事物的行为，在对象中用方法来表示（常用动词）</p>
</blockquote>
<hr>
<h4 id="创建对象的三种方法"><a href="#创建对象的三种方法" class="headerlink" title="创建对象的三种方法"></a>创建对象的三种方法</h4><ol>
<li>利用字面量创建对象<blockquote>
<p>对象字面量{ }：花括号里面包含了表达式这个具体事物（对象）的属性和方法。</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj &#x3D;&#123; &#125;;&#x2F;&#x2F;创建了一个空的对象。</span><br><span class="line">&#x2F;&#x2F;1.里面的属性或者方法采用键值对的形式  健属性名：值属性值</span><br><span class="line">&#x2F;&#x2F;2.多个属性和方法中间采用逗号隔开的。</span><br><span class="line">&#x2F;&#x2F;3.方法冒号后面跟着的是一个匿名函数的。</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>利用new object创建对象</p>
<blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj &#x3D;new object();</span><br><span class="line">obj.uname &#x3D; &#39;张三&#39;;</span><br><span class="line">obj.age &#x3D; 18;</span><br><span class="line">obj.sex &#x3D; &#39;男&#39;;</span><br><span class="line">obj.SayHi &#x3D; function()&#123;</span><br><span class="line">    console.log(&#39;hi~&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 1.利用等号赋值的方法，添加对象的属性和方法。</span><br><span class="line">&#x2F;&#x2F; 2.每个属性和方法之间用分号结束。</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用构造函数创建对象</p>
<blockquote>
<p>我们为什么需要使用构造函数，就是因为我们前面两种创建对象的方式一次只能创建一个对象，因此我们可以利用函数的方法，重复这些相同的代码，我们就把这个函数称为构造函数。</p>
</blockquote>
</li>
</ol>
<p>构造函数语法格式：</p>
<blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function 构造函数名()&#123;</span><br><span class="line">    this.属性 &#x3D; 值;</span><br><span class="line">    this.方法 &#x3D; function()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用构造函数：new 构造函数名();</p>
<p>案例：</p>
<blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Star(uname,age,sex)&#123;</span><br><span class="line">    this.name &#x3D; unmae;</span><br><span class="line">    this.age &#x3D; age;</span><br><span class="line">    this.sex &#x3D; sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nes Star(&#39;刘德华&#39;,18,&#39;男&#39;);</span><br><span class="line">&#x2F;&#x2F;1.构造函数名字首字母要大写.</span><br><span class="line">&#x2F;&#x2F;2.构造函数不需要retun就可以返回结果.</span><br><span class="line">&#x2F;&#x2F;3.调用构造函数必须使用new.</span><br><span class="line">&#x2F;&#x2F;4.只要new Star()调用函数就创建一个对象.</span><br><span class="line">&#x2F;&#x2F;5.构造函数的属性和方法前面必须添加this.</span><br></pre></td></tr></table></figure>
<p>构造函数和对象的相互联系</p>
<ol>
<li>构造函数：它类似于Java语言里面的类class（泛指的某一大类）.</li>
<li>对象：特指一个具体的事物.</li>
<li>利用构造函数创建对象的过程我们也称为对象的实例化.</li>
</ol>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>对象</tag>
        <tag>创建对象的三种方法</tag>
        <tag>构造函数和对象的相互联系</tag>
      </tags>
  </entry>
  <entry>
    <title>变量作用域</title>
    <url>/2019/12/29/%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ol>
<li>全局变量在代码的任何位置都可以使用</li>
<li>特殊情况下，在函数内不使用var声明的变量也是全局变量（不建议使用）.</li>
</ol>
<p>局部变量：形参可以视为局部变量.</p>
<p>js也是在ES6的时候新增的块级作用域{  }.</p>
<h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><ol>
<li>只要是代码，就至少有一个作用域.</li>
<li>写在函数内部的局部作用域.</li>
<li>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域.</li>
<li>根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链，预解析运行、JS分为预解析、代码执行.</li>
</ol>
<ul>
<li>预解析JS引擎会把JS里面所有 var还有function提升到当前作用域的最前面.<h5 id="预解析分为变量预解析（变量提升）-（函数提升）"><a href="#预解析分为变量预解析（变量提升）-（函数提升）" class="headerlink" title="- 预解析分为变量预解析（变量提升）..（函数提升）"></a>- 预解析分为变量预解析（变量提升）..（函数提升）</h5></li>
</ul>
<ol>
<li>变量提升，把所有的变量声明提升到当前的作用域最前面.</li>
<li>函数提升，把所有函数声明提升到当前，不提升赋值操作，作用域的最前面，不调用函数.</li>
</ol>
<p>案例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f1();</span><br><span class="line">console.log(c);</span><br><span class="line">console.log(b);</span><br><span class="line">console.log(a);</span><br><span class="line">function f1()&#123;</span><br><span class="line">    var a&#x3D;b&#x3D;c&#x3D;9;</span><br><span class="line">    console.log(a);</span><br><span class="line">    console.log(b);</span><br><span class="line">    console.log(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>var a=b=c=9;   相当于var a=9; b=9;c=9;(没有var声明当全局变量看)</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>作用域链</tag>
        <tag>预解析分为变量预解析（变量提升）..（函数提升）</tag>
      </tags>
  </entry>
  <entry>
    <title>短路运算</title>
    <url>/2019/12/28/%E9%80%BB%E8%BE%91%E4%B8%AD%E6%96%AD%EF%BC%8C%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="短路运算（逻辑判断）"><a href="#短路运算（逻辑判断）" class="headerlink" title="短路运算（逻辑判断）"></a>短路运算（逻辑判断）</h4><p>短路运算的原理：当有多个表达式（值）时，左边的表达式值可以确定结果时，就不再继续运算右边的表达式的值：</p>
<html>
<!--在这里插入内容-->
<ol>
<li>逻辑与</li>
语法：表达式为真，则返回值表达式2

<p>如果第一个表达式为真，则返回表达式2</p>
<p>如果第一个表达式为假，则返回表达式1</p>
<li>逻辑或短路运算</li>
如果表达式1为真，则返回表达式1，如果表达式1为假，则返回表达式2

<p>逻辑与和逻辑或优先级</p>
<p>先算与后算或</p>
</ol>
</html>

<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><ol>
<li>首先执行里面的计算器变量 var i = 1.但是这句话在for里面只执行一次 index.</li>
<li>去 i&lt;=100 求判断是否满足条件，如果满足条件，就去执行循环体,不满足条件退出循环.</li>
<li>最后去执行 i++. i++是单独写的代码，递增，第一轮结束.</li>
<li>接着去执行 i &lt;= 100 如果满足条件，就去执行循环体，不满足条件退出循环第二轮.</li>
</ol>
<h4 id="断点调试方法"><a href="#断点调试方法" class="headerlink" title="断点调试方法"></a>断点调试方法</h4><p>for 循环可以重复执行不同的代码，因为我们有计数器变量 i 的存在，i 每次循环值都会变化.</p>
<p>外层控制行数，内层控制列数</p>
<p>双重for循环，外层循环一次，内层for循环全部.</p>
<p>for循环是循环条件和数字直接相关的循环.</p>
<h4 id="函数-arguments的使用"><a href="#函数-arguments的使用" class="headerlink" title="函数 arguments的使用"></a>函数 arguments的使用</h4><p>当不确定有多少参数传递的时候，可以用argments来获取.在Javascript中，arguments事实际上它是当前函数的一个内置对象，所有函数都内置了一个arguments对象，arguments对象中存储有了传递的所有实参.</p>
<p>arguments里面存储了所有传递过来的实参.</p>
<p>//伪数组，并不是真正意义上的数组.</p>
<p>//<html></p>
<!--在这里插入内容-->
<ol>
<li>具有数组的length属性</li>
<li>按照索引的方式进行存储的</li>
<li>它没有真正数组的一些方法，pop(),push().</li>
<li>只有函数才内置好了arguments对象（匿名函数）</li>
</ol>
</html>

<p>函数的2种声明方式</p>
<ol>
<li>利用函数关键字自定义命名函数</li>
<li>函数表达式：var 变量名 = function(){  };</li>
</ol>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>逻辑判断</tag>
        <tag>循环</tag>
        <tag>断点调试方法</tag>
        <tag>函数 arguments的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>变量命名规范</title>
    <url>/2019/12/27/js%E5%8F%98%E9%87%8F%E3%80%81js%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h3><ul>
<li><h6 id="由字母、数字、下划线、美元符号组成"><a href="#由字母、数字、下划线、美元符号组成" class="headerlink" title="由字母、数字、下划线、美元符号组成"></a>由字母、数字、下划线、美元符号组成</h6></li>
<li><h6 id="严格区分大小写"><a href="#严格区分大小写" class="headerlink" title="严格区分大小写"></a>严格区分大小写</h6></li>
<li><h6 id="不能以数字开头"><a href="#不能以数字开头" class="headerlink" title="不能以数字开头"></a>不能以数字开头</h6></li>
<li><h6 id="不能是关键字"><a href="#不能是关键字" class="headerlink" title="不能是关键字"></a>不能是关键字</h6></li>
<li><h6 id="变量名义必须有意义"><a href="#变量名义必须有意义" class="headerlink" title="变量名义必须有意义"></a>变量名义必须有意义</h6></li>
<li><h6 id="遵守驼峰命名法。首字母小写，后面的首字母需要大写"><a href="#遵守驼峰命名法。首字母小写，后面的首字母需要大写" class="headerlink" title="遵守驼峰命名法。首字母小写，后面的首字母需要大写"></a>遵守驼峰命名法。首字母小写，后面的首字母需要大写</h6></li>
<li><h6 id="推荐翻译工具：有道、爱词霸"><a href="#推荐翻译工具：有道、爱词霸" class="headerlink" title="推荐翻译工具：有道、爱词霸"></a>推荐翻译工具：有道、爱词霸</h6></li>
</ul>
<h5 id="在JS中加0为八进制"><a href="#在JS中加0为八进制" class="headerlink" title="在JS中加0为八进制"></a>在JS中加0为八进制</h5><h5 id="十六进制的前面加OX"><a href="#十六进制的前面加OX" class="headerlink" title="十六进制的前面加OX"></a>十六进制的前面加OX</h5><p>infinity 代表无穷大，大于任何数值</p>
<p>-infinity代表无穷小，小于任何数</p>
<p>NAN Not a Number 代表一个非数值</p>
<p>isNAN（）这个方法用来判断非数字，如果是数字返回false，如果不是数字返回true</p>
<h4 id="字符型转换为数字型"><a href="#字符型转换为数字型" class="headerlink" title="字符型转换为数字型"></a>字符型转换为数字型</h4><p>parseInt(string)</p>
<p>parseFloat(string)</p>
<p>Number()</p>
<p>==JS隐式转换利用算数运算符隐式转换为数值型==</p>
<p>例如 - * /</p>
<h4 id="数据类型转换为布尔类型"><a href="#数据类型转换为布尔类型" class="headerlink" title="数据类型转换为布尔类型"></a>数据类型转换为布尔类型</h4><ol>
<li><p>代表空、否定的值会被转换为false.如“0”、NaN、NULL、undefined其余值都会被转换为true.</p>
</li>
<li><p>浮点数、算数运算里面会有问题.</p>
</li>
<li><p>前置自增和后；置自增如果单独使用效果是一样的.</p>
</li>
<li><p>后置自增口诀：先返回原值后自加1.</p>
</li>
<li><p>后置自增口诀：先自加1，后返回值.</p>
</li>
</ol>
<p>比较会返回一个布尔值.</p>
<p>==默认转换数据类型（判断两边值是否相等）.</p>
<ol>
<li>我们程序里面等于符号是==默认转换数据类型，会把字符串的数据转换为数字型，只要求值相等就可以.</li>
<li>===全等要求两侧的值还有数据类型完全一致就可以.（判断两边的值和数据类型是否完全相同）.</li>
</ol>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>变量命名规范</tag>
        <tag>字符型转换为数字型</tag>
        <tag>数据类型转换为布尔类型</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML（2）</title>
    <url>/2019/12/04/HTML%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="HTML（2）"><a href="#HTML（2）" class="headerlink" title="HTML（2）"></a>HTML（2）</h4><h5 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h5><p>目标</p>
<ul>
<li>理解<ul>
<li>能说出表格用来做什么的</li>
<li>表格的基本结构组成</li>
</ul>
</li>
<li>应用<ul>
<li>能够熟练写出n行n列的表格</li>
<li>能够简单的合并单元格</li>
</ul>
</li>
</ul>
<h5 id="表格作用"><a href="#表格作用" class="headerlink" title="表格作用"></a>表格作用</h5><hr />
表格不是用来布局的，表格是用来展示表格数据的，因为它可以让数据显示的非常的规整，可读性非常好。

<p>特别是后台展示数据的时候，表格运用是否熟练就显得非常重要，一个清爽简约的表格能够把繁杂的数据表现得很有条理，虽然div布局也可以做到，但是总没有表格来的方便。</p>
<h6 id="1-创建表格"><a href="#1-创建表格" class="headerlink" title="1.创建表格"></a>1.创建表格</h6><hr />
在HTML网页中，要想创建表格，就需要使用表格相关的标签。

<h5 id="创建表格的相关语法"><a href="#创建表格的相关语法" class="headerlink" title="创建表格的相关语法"></a>创建表格的相关语法</h5><blockquote>
<p>&lt;table&#62;<br />&emsp;&emsp;&emsp;&lt;tr&#62;<br />&emsp;&emsp;&emsp;&emsp;&emsp;&lt;td&#62;单元格内的文字&lt;/td&#62;<br />&emsp;&emsp;&emsp;…<br />&emsp;&emsp;&emsp;&lt;tr/&#62;<br />&emsp;&emsp;&emsp;…<br />&lt;/table&#62;</p>
</blockquote>
<p>要深刻体会表格、行、单元格他们的构成。</p>
<p>在上面的语法中包含基本的三对HTMLb标签，分别为table、tr、td，它们是创建表格的基本标签，缺一不可，下面对他们进行具体的解释</p>
<ol>
<li>table用于定义一个表格标签</li>
<li>tr标签用于定义表格中的行，必须嵌套在table标签中</li>
<li>tdy用于定义表格中的单元格，必须嵌套在&lt;tr&#62;&lt;/tr&#62;标签中</li>
<li>字母td指表格数据（table date）,即数据单元格的内容，表格最适合的地方就是用来存储数据的</li>
</ol>
<h6 id="2-表格属性"><a href="#2-表格属性" class="headerlink" title="2.表格属性"></a>2.表格属性</h6><hr />

<table>
<thead>
<tr>
<th>属性名</th>
<th>含义</th>
<th>常用属性值</th>
</tr>
</thead>
<tbody><tr>
<td>border</td>
<td>设置表格的边框（默认border=”0” 无边框）</td>
<td>像素值</td>
</tr>
<tr>
<td>cellspacing</td>
<td>设置单元格与单元格边框之间的空白间距</td>
<td>像素值（默认为2像素）</td>
</tr>
<tr>
<td>cellpading</td>
<td>设置单元格内容与单元格边框之间的空白间距</td>
<td>像素值（默认1像素）</td>
</tr>
<tr>
<td>width</td>
<td>设置表格的宽度</td>
<td>像素值</td>
</tr>
<tr>
<td>height</td>
<td>设置表格的高度</td>
<td>像素值</td>
</tr>
<tr>
<td>align</td>
<td>设置表格在网页种的水平对齐方式</td>
<td>left、center、right</td>
</tr>
</tbody></table>
<h6 id="3-表头单元格th"><a href="#3-表头单元格th" class="headerlink" title="3.表头单元格th"></a>3.表头单元格th</h6><hr />

<ul>
<li>作用</li>
</ul>
<p>一般表头单元格位于表格的第一行或第一列，并且文本加粗居中</p>
<ul>
<li>语法</li>
</ul>
<p>只需用表头标签&lt;th&#62;&lt;/th&#62;替代相应的单元格标签&lt;td&#62;&lt;/td&#62;即可。</p>
<h6 id="4-表格标题caption"><a href="#4-表格标题caption" class="headerlink" title="4.表格标题caption"></a>4.表格标题caption</h6><p>定义和用法：</p>
<blockquote>
<p>&lt;table&#62;<br/>&ensp;&ensp;&lt;caption&#62;我是表格标题&lt;/caption&#62;<br/>&lt;/table&#62;</p>
</blockquote>
<p>注意：</p>
<ol>
<li>caption元素定义表格标题，通常这个标题会被居中且显示于表格之上。</li>
<li>caption标签必须紧随table标签之后</li>
<li>这个标签只存在表格里面才有意义</li>
</ol>
<h6 id="5-合并单元格"><a href="#5-合并单元格" class="headerlink" title="5.合并单元格"></a>5.合并单元格</h6><hr / >
合并单元格是我们比较常用的一个操作，但是不会合并的很复杂。

<h6 id="5-1合并单元格2种方式"><a href="#5-1合并单元格2种方式" class="headerlink" title="5.1合并单元格2种方式"></a>5.1合并单元格2种方式</h6><ul>
<li>跨行合并：rowspan=”合并单元格的个数”</li>
<li>跨列合并：colspan=”合并单元格的个数”</li>
</ul>
<p>合并单元格三部曲：</p>
<ol>
<li>先确定是跨行还是跨列合并</li>
<li>根据先上后下先左后右的原则找到目标单元格，然后写上合并方式还有要合并的单元格数量，比如：&lt;td&emsp;colspan=”3”&gt;&lt;/td&#62;</li>
<li>删除多余的单元格</li>
</ol>
<h5 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h5><hr />

<h6 id="1-1无序列表"><a href="#1-1无序列表" class="headerlink" title="1.1无序列表"></a>1.1无序列表</h6><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：</p>
<blockquote>
<p>&lt;ul&#62;<br />&ensp;&ensp;&lt;li&#62;列表项1&lt;/li&#62;<br />&ensp;&ensp;&lt;li&#62;列表项1&lt;/li&#62;<br />&ensp;&ensp;&lt;li&#62;列表项1&lt;/li&#62;<br />&ensp;&ensp;…<br />&lt;/ul&#62;</p>
</blockquote>
<h6 id="1-2有序列表"><a href="#1-2有序列表" class="headerlink" title="1.2有序列表"></a>1.2有序列表</h6><p>有序列表即为有排列顺序的列表，其各个列表按照一定的顺序排列定义，有序列表的基本语法格式如下：</p>
<blockquote>
<p>&lt;ol&#62;<br />&ensp;&ensp;&lt;li&#62;列表项1&lt;/li&#62;<br />&ensp;&ensp;&lt;li&#62;列表项1&lt;/li&#62;<br />&ensp;&ensp;&lt;li&#62;列表项1&lt;/li&#62;<br />&ensp;&ensp;…<br />&lt;/ol&#62;</p>
</blockquote>
<h6 id="1-3自定义列表"><a href="#1-3自定义列表" class="headerlink" title="1.3自定义列表"></a>1.3自定义列表</h6><blockquote>
<p>&lt;dl&#62;<br />&ensp;&ensp;&lt;dt&#62;名词&lt;/dt&#62;<br />&ensp;&ensp;&lt;dd&#62;名词解释1&lt;/dd&#62;<br />&ensp;&ensp;&lt;dd&#62;名词解释2&lt;/dd&#62;<br />&ensp;&ensp;…<br />&lt;/dl&#62;</p>
</blockquote>
<p>两兄弟dt和dd，dd和dt是并列关系</p>
<h5 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h5><hr />
表单的目的是为了收集用户信息。
> 在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3部分构成。

<h6 id="2-1-input控件"><a href="#2-1-input控件" class="headerlink" title="2.1 input控件"></a>2.1 input控件</h6><p>语法</p>
<blockquote>
<p>&lt;input type =”属性值“ value=”你好”&#62;</p>
</blockquote>
<ul>
<li>input输入的意思</li>
<li><input/>标签为单标签</li>
<li>type属性设置不同的属性值用来指定不同的控件类型</li>
<li>除了type属性还有别的属性</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>text</td>
<td>单行文本输入框</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>password</td>
<td>密码输入框</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>radio</td>
<td>单选按钮</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>checkbox</td>
<td>复选框</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>button</td>
<td>普通按钮</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>submit</td>
<td>提交按钮</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>reset</td>
<td>重置按钮</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>image</td>
<td>图象形式的提交按钮</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>file</td>
<td>文件域</td>
</tr>
<tr>
<td>name</td>
<td>由用户自定义</td>
<td>控件名称</td>
</tr>
<tr>
<td>value</td>
<td>由用户自定义</td>
<td>input控件中的默认文本值</td>
</tr>
<tr>
<td>size</td>
<td>正整数</td>
<td>input控件在页面中的显示宽度</td>
</tr>
<tr>
<td>checked</td>
<td>checked</td>
<td>定义选择控件默认被选中的项</td>
</tr>
<tr>
<td>maxlength</td>
<td>正整数</td>
<td>控件允许输入的最多字符数</td>
</tr>
</tbody></table>
<p>radio单选按钮可以通过name属性进行区分,让几个中只能选择一个。</p>
<p>checkbox复选框按钮可以通过设置name属性进行多选。</p>
<p>checked属性设置默认选中项目（一般单选按钮和复选按钮才会有）。</p>
<p>普通按钮需要写value值，提交按钮不需要，图片提交按钮里面必须包含src属性</p>
<h6 id="2-2label标签"><a href="#2-2label标签" class="headerlink" title="2.2label标签"></a>2.2label标签</h6><hr />
目的：

<p>label标签主要目的是为了提高用户体验。为用户提供最优秀的服务。</p>
<p><strong>概念：</strong></p>
<p>label标签为input元素定义标注(标签)。</p>
<p><strong>作用：</strong></p>
<p>用于绑定一个表单元素，当点击label标签的时候，被绑定的表单元素就会获得输入焦点。</p>
<p><strong>如何绑定元素呢？</strong></p>
<p>1.第一种用法就是用label直接包括input表单。</p>
<blockquote>
<p><label>用户明：&lt;input type=”radio” name=”username” value=”请输入用户名”&#62;<label/></p>
</blockquote>
<p>适合单个表单选择</p>
<p>2.第二种用法for属性规定label与哪个表单元素绑定。</p>
<blockquote>
<p><label for="sex">男</label></p>
</blockquote>
<h6 id="2-3textarea控件-文本域"><a href="#2-3textarea控件-文本域" class="headerlink" title="2.3textarea控件(文本域)"></a>2.3textarea控件(文本域)</h6><hr />
语法:

<blockquote>
<p><textarea ><br />文本内容<br />&lt;/testarea&#62;</p>
</blockquote>
<p>作用：</p>
<p>通过textarea控件可以轻松地创建多行文本输入框</p>
<p>文本框和文本域区别</p>
<table>
<thead>
<tr>
<th>表单</th>
<th>名称</th>
<th>区别</th>
<th>默认值显示</th>
<th>用于场景</th>
</tr>
</thead>
<tbody><tr>
<td>input<br />type=”text”</td>
<td>文本框</td>
<td>只能显示一行文本</td>
<td>单标签，通过value显示默认值</td>
<td>用户名、昵称、密码等</td>
</tr>
<tr>
<td>textarea</td>
<td>文本域</td>
<td>可以显示多行文本</td>
<td>双标签、默认值写到标签中间</td>
<td>留言板</td>
</tr>
</tbody></table>
<h6 id="2-4select下拉列表"><a href="#2-4select下拉列表" class="headerlink" title="2.4select下拉列表"></a>2.4select下拉列表</h6><hr />
目的：

<p>如果有多个选项让用户选择，为了节约空间，我们可以使用select控件定义下拉列表。</p>
<p>语法：</p>
<blockquote>
<p><select><br />&nbsp;&nbsp;<option>选项1<option><br />&nbsp;&nbsp;<option>选项1<option><br />&nbsp;&nbsp;<option>选项1<option><br />&nbsp;&nbsp;…<br /></select></p>
</blockquote>
<p>注意：</p>
<p>1.<select>标签至少包含一对<option></p>
<p>2.在option中定义selectd=”selectd”时，当前项即为默认选中项。</p>
<p>3.现在实际开发使用较少</p>
<h5 id="3-表单域"><a href="#3-表单域" class="headerlink" title="3.表单域"></a>3.表单域</h5><p>通过form表单域收集用户信息传递给服务器</p>
<p>目的：</p>
<p>在html中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。</p>
<p>语法：</p>
<blockquote>
<form action="url地址" method="提交方式" name="表单名称"&#62;<br />各种表单控件<br /></form>
</blockquote>
<p>常用属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>action</td>
<td>url地址</td>
<td>用于指定接受并处理表单数据的服务器程序的url地址</td>
</tr>
<tr>
<td>method</td>
<td>get/post</td>
<td>用于设置表单数据的提交方式，其取值为get或post。</td>
</tr>
<tr>
<td>name</td>
<td>名称</td>
<td>用于指定表单的名称，以区分同一个页面中的多个表单</td>
</tr>
</tbody></table>
<h6 id="查文档"><a href="#查文档" class="headerlink" title="查文档"></a>查文档</h6><p>w3c: <a href="http://www.w3scholl.com.cn/" target="_blank" rel="noopener">http://www.w3scholl.com.cn/</a></p>
<p>MDN: <a href="http://developer.mozilla.ora/zh-CN/" target="_blank" rel="noopener">http://developer.mozilla.ora/zh-CN/</a></p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>表格标签</tag>
        <tag>列表标签</tag>
        <tag>表单标签</tag>
        <tag>查文档</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML（1）</title>
    <url>/2019/12/03/html/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="HTML（1）"><a href="#HTML（1）" class="headerlink" title="HTML（1）"></a>HTML（1）</h4><ul>
<li>理解<ul>
<li>HTML的概念</li>
<li>HTML标签的分类</li>
<li>HTML标签的关系</li>
<li>HTML标签的语义化</li>
</ul>
</li>
<li>应用<ul>
<li>HTML骨架格式</li>
<li>vscode</li>
</ul>
</li>
<li>HTML指的是超本文标记语言（Hyper Text Markup Language）</li>
<li>HTML不是一种编程语言，而是一种标记语言（markup langguage）</li>
<li>标记语言是一套标记标签（markup tag）<h5 id="html的作用"><a href="#html的作用" class="headerlink" title="html的作用"></a>html的作用</h5><blockquote>
<p>网页是由网页元素组成的，这些元素是利用html标签描述出来，然后通过浏览器解析，就可以显示给用户。</p>
</blockquote>
<h5 id="超文本有两层含义"><a href="#超文本有两层含义" class="headerlink" title="超文本有两层含义"></a>超文本有两层含义</h5></li>
</ul>
<ol>
<li>因为它可以加入图片、声音、动画、多媒体等内容（超越文本限制）。</li>
<li>不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文本连接（超链接文本）。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;timg.jpg&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>
<h5 id="html骨架标签"><a href="#html骨架标签" class="headerlink" title="html骨架标签"></a>html骨架标签</h5>HTML有自己的语言语法骨架格式：（要遵循，要专业）要求务必非常流畅的默写下来。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">         &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;html&gt;</span><br></pre></td></tr></table></figure>
<h6 id="html骨架标签总结"><a href="#html骨架标签总结" class="headerlink" title="html骨架标签总结"></a>html骨架标签总结</h6><table>
<thead>
<tr>
<th>标签名</th>
<th>定义</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&#60;html&#62;&#60;html&#62;</td>
<td>HTML标签</td>
<td>页面中最大的标签，称为根标签</td>
</tr>
<tr>
<td>&#60;head&#62;&#60;head&#62;</td>
<td>文档的头部</td>
<td>注意在head标签中我们必须要设置的标签是title</td>
</tr>
<tr>
<td>&#60;title&#62;&#60;title&#62;</td>
<td>文档的标签</td>
<td>让页面拥有属于自己的网页标题</td>
</tr>
<tr>
<td>&#60;body&#62;&#60;body&#62;</td>
<td>文档的主题</td>
<td>元素包含文档的所有内容，页面内容基本都是放到body里面的</td>
</tr>
</tbody></table>
<h5 id="html元素标签分类"><a href="#html元素标签分类" class="headerlink" title="html元素标签分类"></a>html元素标签分类</h5><h6 id="标签"><a href="#标签" class="headerlink" title="标签:"></a>标签:</h6><p>在html页面中，带有“&lt;&gt;”符号的元素被称为HTML标签，如上面提到的&#60;html&#62;、&#60;head&#62;、&#60;body&#62;都是html骨架结构标签。</p>
<h6 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h6><ol>
<li>常规标签（双标签）<blockquote>
<p><font color=#008000>&lt;标签名&gt;</font> 内容 <font color=#008000>&lt;标签名&gt;</font>  比如 <font color=#008000><body></font> 我是文字 <font color=#008000></body></font></p>
</blockquote>
</li>
</ol>
<ul>
<li>该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般被称为“开始标签（start tag）”，“&lt;/标签名&gt;”表示该标签作用结束，一般称为结束标签（end tag）。</li>
<li>和开始标签相比，结束标签只是在前面加了一个关闭字符“/”。</li>
</ul>
<ol start="2">
<li>空元素标签（单标签）<blockquote>
<p><font color=#008000>&lt;标签名/&gt;</font>比如 <font color=#008000>&lt; br / &gt;</font> </p>
</blockquote>
</li>
</ol>
<ul>
<li>空元素用单标签来表示，简单点说，就是里面不包含内容，只有一个开始标签不需要关闭。</li>
<li>单标签很少。</li>
</ul>
<h5 id="HTML标签关系"><a href="#HTML标签关系" class="headerlink" title="HTML标签关系"></a>HTML标签关系</h5><p>主要针对双标签的相互关系分为两种：</p>
<ol>
<li>嵌套关系<blockquote>
<p><font color=#008000><head></font><br/><br>&emsp;&emsp;<font color=#008000><title><title/></font><br/><font color=#008000><head/></font></p>
</blockquote>
</li>
</ol>
<p>2.并列关系</p>
<blockquote>
<p><font color=#008000><head></font><font color=#008000><head/></font><br/><font color=#008000><body></font><font color=#008000><body/></font>    </p>
</blockquote>
<p>建议：</p>
<blockquote>
<p>如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab身位（一个tab是4个空格）。如果是并列关系，最好上下对齐。</p>
</blockquote>
<h5 id="文档类型-lt-DOCTYPE-gt"><a href="#文档类型-lt-DOCTYPE-gt" class="headerlink" title="文档类型&lt;!DOCTYPE&gt;"></a>文档类型&lt;!DOCTYPE&gt;</h5><p>用法：</p>
<blockquote>
<!DOCTYPE html>
</blockquote>
<p>作用：<br>&lt;!DOCTYPE&gt;声明位于文档中的最前面的位置，处于&#60;html&#62;标签之前。此标签可告知浏览器文档使用哪种HTML或者XHTML规范。</p>
<h5 id="页面语言lang"><a href="#页面语言lang" class="headerlink" title="页面语言lang"></a>页面语言lang</h5><blockquote>
<p><font color=#008000>&lt;html lang=”en”&#62;</font> 指定html语言种类</p>
</blockquote>
<p>最常见的2个：</p>
<ol>
<li>en定义语言为英语</li>
<li>zh-CN定义语言为中文</li>
</ol>
<p>简单来说，可能对程序来说没有太大的作用，但是它可以告诉浏览器，搜索引擎，一些处理html的程序对页面语言内容来做一些对应处理或者事情，比如可以</p>
<ul>
<li>根据lang属性来设定不同语言的css样式，或者字体</li>
<li>告诉搜索引擎做精确的识别</li>
<li>让语法检查程序做语言识别</li>
<li>帮助翻译工具做识别</li>
</ul>
<h5 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h5><blockquote>
<p><font color=#008000>&lt;meta charset=”UTF-8”/&#62;</font><br>字符集（character set）是多个字符的合集，计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。</p>
</blockquote>
<p>utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。</p>
<ul>
<li>gb2312简单中文。包括6763个汉字</li>
<li>BIGS 繁体中文，港澳台等用</li>
<li>GBK包含全部中文字符，是GB2312的扩展，加入对繁体字的支持，兼容GB2312</li>
<li>UTF-8则基本包含全世界所有国家需要用到的字符</li>
</ul>
<h5 id="HTML标签语义化"><a href="#HTML标签语义化" class="headerlink" title="HTML标签语义化"></a>HTML标签语义化</h5><p>白话：所谓标签语义化，就是指标签的含义。</p>
<blockquote>
<p>根据标签的含义，在合适的地方给一个最为合理的标签，让结构更清晰。</p>
</blockquote>
<ol>
<li>方便代码的阅读和维护</li>
<li>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容</li>
<li>使用语义化标签会具有更好地搜索引擎优化</li>
</ol>
<h5 id="html常用标签"><a href="#html常用标签" class="headerlink" title="html常用标签"></a>html常用标签</h5><p>HTML和CSS是两种完全不同的语言，HTML是结构，CSS是样式。</p>
<h4 id="1-1排版标签"><a href="#1-1排版标签" class="headerlink" title="1.1排版标签"></a>1.1排版标签</h4><hr />
排版标签主要是和CSS搭配使用，显示网页结构的标签，是网页布局最常用的标签
1. 标题标签h（熟记）
单词缩写： head 头部、标题 &ensp; &ensp; title 文档标题
为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题，即

<p><strong>标题标签语义</strong>：作为标题使用，并且依据重要性递减<br>其基本语法格式如下：</p>
<blockquote>
<p><font color=#008000>&lt;h1&#62;标题</font><font color=#008000>&lt;h1/&#62;</font><br/><font color=#008000>&lt;h2&#62;标题</font><font color=#008000>&lt;h2/&#62;</font> <br/><font color=#008000>&lt;h3&#62;标题</font><font color=#008000>&lt;h3/&#62;</font><br/><font color=#008000>&lt;h4&#62;标题</font><font color=#008000>&lt;h4/&#62;</font> <br/><font color=#008000>&lt;h5&#62;标题</font><font color=#008000>&lt;h5/&#62;</font><br/><font color=#008000>&lt;h6&#62;标题</font><font color=#008000>&lt;h6/&#62;</font> </p>
</blockquote>
<p>2.段落标签p（熟记）<br>单词缩写：pargraph 段落</p>
<p><strong>作用语义</strong><br>可以把HTML文档分割为若干段落<br>在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是</p>
<blockquote>
<p><font color=#008000>&lt;p&#62;文本内容</font><font color=#008000>&lt;p/&#62;</font></p>
</blockquote>
<p> 是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。</p>
<p>3.水平线标签hr（认识）<br>单词缩写：horizontal &ensp;横线</p>
<p>在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，&#60;hr/&#62;就是创建横跨网页水平线地标签。其基本语法格式如下：</p>
<blockquote>
<p><font color=#008000>&lt;hr/&#62;</font>是单标签</p>
</blockquote>
<p>在网页中显示默认样式的水平线。</p>
<p>4.换行标签br（熟记）<br>单词缩写：break 打断，换行</p>
<p>在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果某段文本强制换行显示，就需要使用换行标签</p>
<blockquote>
<p><font color=#008000>&lt;br/&#62;</font></p>
</blockquote>
<p>5.div和span标签（重点）</p>
<p>div &ensp;span&ensp;是没有语义的 &ensp;是网页布局的主要两个盒子</p>
<p>div就是division的缩写 分割，分区的意思，其实有很多div来组合网页。</p>
<p>span &ensp;跨度，跨距；范围</p>
<p>语法格式：</p>
<blockquote>
<p><font color=#008000>&lt;div&#62;</font>这是头部<font color=#008000>&lt;div/&#62;</font> &ensp;&ensp;&ensp;<font color=#008000>&lt;span&#62;</font>今日价格<font color=#008000>&lt;span/&#62;</font></p>
</blockquote>
<p>它们两个都是盒子，用来装我们网页元素的，只不过他们有区别，我们要记住记住使用方法和特点就好了</p>
<ul>
<li>div标签用来布局的，但是现在==一行只能放一个DIV==</li>
<li>span标签用来布局的，==一行上可以放好多个span==</li>
</ul>
<h6 id="排版标签总结"><a href="#排版标签总结" class="headerlink" title="排版标签总结"></a>排版标签总结</h6><table>
<thead>
<tr>
<th>标签名</th>
<th>定义</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&#60;hx&#62;&#60;/hx&#62;</td>
<td>标题标签</td>
<td>作为标题使用，并且依据重要性递减</td>
</tr>
<tr>
<td>&#60;p&#62;&#60;/p&#62;</td>
<td>段落标签</td>
<td>可以把HTML文档分割为若干段落</td>
</tr>
<tr>
<td>&#60;hr /&#62;</td>
<td>水平线标签</td>
<td>一条水平分割线</td>
</tr>
<tr>
<td>&#60;br /&#62;</td>
<td>换行标签</td>
<td></td>
</tr>
<tr>
<td>&#60;div&#62;&#60;/div&#62;</td>
<td>div标签</td>
<td>用来布局的，但是现在一行只能放一个div</td>
</tr>
<tr>
<td>&#60;span&#62;&#60;/span&#62;</td>
<td>span标签</td>
<td>用来布局的，一行上可以放好多个span</td>
</tr>
</tbody></table>
<h4 id="1-2文本格式化标签"><a href="#1-2文本格式化标签" class="headerlink" title="1.2文本格式化标签"></a>1.2文本格式化标签</h4><hr />
在网页中，有时需要为文字设置粗体、斜体或者下划线效果，这时就需要用到HTML文本格式化标签，使文字以特殊的方式显示。

<table>
<thead>
<tr>
<th>标签</th>
<th>显示效果</th>
</tr>
</thead>
<tbody><tr>
<td>&#60;b&#62;&#60;/b&#62;&#60;strong&#62;&#60;/strong&#62;</td>
<td>文字以==粗体==方式显示（XHTML推荐使用strong）</td>
</tr>
<tr>
<td>&#60;i&#62;&#60;/i&#62; ，&#60;em&#62;&#60;/em&#62;</td>
<td>文字以==斜体==方式显示（XHTML推荐使用em）</td>
</tr>
<tr>
<td>&#60;s&#62;&#60;/s&#62;,&#60;del&#62;&#60;/del&#62;</td>
<td>文字以==加删除线==方式显示（XHTML推荐使用del）</td>
</tr>
<tr>
<td>&#60;u&#62;&#60;/u&#62;,&#60;ins&#62;&#60;/ins&#62;</td>
<td>文字==加下划线==方式显示（XHTML不赞成使用u）</td>
</tr>
</tbody></table>
<h4 id="1-3标签属性"><a href="#1-3标签属性" class="headerlink" title="1.3标签属性"></a>1.3标签属性</h4><hr />
所谓标签属性就是外在特性，比如手机颜色手机尺寸。

<p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下：</p>
<blockquote>
<p><font color=#008000>&lt;标签名&emsp;属性1=”属性值1”属性2=”属性值2”…&#62;</font>内容<font color=#008000>&lt;标签名/&#62;</font><br /><br><font color=#008000>&lt;手机 &emsp;颜色=”红色”大小=”5寸”&#62;</font><font color=#008000>&lt;div/&#62;</font></p>
</blockquote>
<h4 id="1-4图像标签img（重点）"><a href="#1-4图像标签img（重点）" class="headerlink" title="1.4图像标签img（重点）"></a>1.4图像标签img（重点）</h4><hr />
单词缩写： image图像

<p>要想在网页中显示图像就需要使用图像标签，以下是图像标签&#60;img/&#62;以及和它相关的属性，（它是一个单标签）</p>
<p>语法如下：</p>
<blockquote>
<p><font color=#008000>&lt;img&ensp;src=”图像URL”/&#62;</font></p>
</blockquote>
<p>该语法中src属性用于指定图像文件的路径h和文件名，它是img标签的必需属性。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>src</td>
<td>URL</td>
<td>图像的路径</td>
</tr>
<tr>
<td>alt</td>
<td>文本</td>
<td>图像不能显示时的替换文本</td>
</tr>
<tr>
<td>title</td>
<td>文本</td>
<td>鼠标悬停时显示的内容</td>
</tr>
<tr>
<td>width</td>
<td>像素(XHTML不支持页面百分比)</td>
<td>设置图像的宽度</td>
</tr>
<tr>
<td>height</td>
<td>像素（XHTML不支持页面百分比）</td>
<td>设置图像的高度</td>
</tr>
<tr>
<td>boder</td>
<td>数字</td>
<td>设置图像边框的宽度</td>
</tr>
</tbody></table>
<p>注意：</p>
<ol>
<li>标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</li>
<li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li>
<li>采取键值对的格式&ensp;key=”value”的格式。</li>
</ol>
<h4 id="1-5链接标签（重点）"><a href="#1-5链接标签（重点）" class="headerlink" title="1.5链接标签（重点）"></a>1.5链接标签（重点）</h4><hr />
单词缩写： anchor。锚，铁锚的

<p>在html中创建超链接非常简单，只需用标签把文字包括起来就好</p>
<p>语法格式：</p>
<blockquote>
<p><font color=#008000>&lt;a&ensp;href=”跳转目标”&ensp;target=”目标窗口弹出方式”&#62;</font>文本或者图像 <font color=#008000>&lt;/a&#62;</font></p>
</blockquote>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>href</td>
<td>用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能</td>
</tr>
<tr>
<td>target</td>
<td>用于指定链接页面的打开方式，其取值有self和blank两种，其中self为默认值，blank为在新窗口中打开方式。</td>
</tr>
</tbody></table>
<h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><ol>
<li>外部链接 需要添加http://</li>
<li>内部链接直接链接内部页面名称即可，比如&#60;a href=”index.html”&#62;首页&#60;/a&#62;</li>
<li>如果当时没有确定链接目标时，通常将链接标签的href属性值定义为”#”（即href=”#”）,表示该链接暂时为一个空链接。</li>
<li>不仅可以创建文本超链接，在网页中各个元素，如图像、表格、音频、视频等都可以添加超链接。</li>
</ol>
<h4 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h4><hr />
在html中还有一种特殊的标签--注释标签。如果需要在html文档中添加一些便于阅读和理解但又不需要显示在页面中注释文字，就需要用到注释标签。

<p>语法格式：</p>
<blockquote>
<p><font color=#008000>&lt;！–注释语句–&#62;</font> 快捷键是：ctrl+/或者ctrl+shift+/</p>
</blockquote>
<h4 id="路径（重点）"><a href="#路径（重点）" class="headerlink" title="路径（重点）"></a>路径（重点）</h4><hr />
页面中的图片会非常多，通常我们会新建一个文件夹专门用于存放图片文件（images），这时再插入图像，就需要采用“路径”的方式来指定图像文件的位置。路径可分为，相对路径和绝对路径。

<h5 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h5><hr />
以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，所使用的路径将不相同，故称之为相对路径。


<table>
<thead>
<tr>
<th>路径分类</th>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>同一级路径</td>
<td></td>
<td>只需要输入图像文件的名称即可，如&#60;img src=”baidu.gif”/&#62;</td>
</tr>
<tr>
<td>下一级路径</td>
<td>“/”</td>
<td>图像文件位于HTML文件同级文件夹下（例如文件夹名称为：images）如&amp;#60；img src=”images/baidu.gif”/&#62;</td>
</tr>
<tr>
<td>上一级路径</td>
<td>“../”</td>
<td>在文件名之前加入“../”，如果是上两级，则需要使用“../../”,以此类推，如&#60;img src=”../baidu.gif”/&#62;</td>
</tr>
</tbody></table>
<h5 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h5><hr />
绝对路径以web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的。

<p>如“D：\web\img\logo.gif”</p>
<h5 id="5-锚点定位"><a href="#5-锚点定位" class="headerlink" title="5.锚点定位"></a>5.锚点定位</h5><hr />
通过锚点定位创建锚点链接，用户能够快速定位到目标内容。

<p>创建锚点定位链接分为两部：</p>
<blockquote>
<p>1.使用相应的ID名称标注跳转目标的位置。（找目标）<br /><font color=#008000>&lt;h3 id=”two”&#62;</font>第二集<font color=#008000>&lt;/h3&#62;</font><br /><br />2.使用 <font color=#008000>&lt;a href=”#id名”&#62;</font>链接文本<font color=#008000>&lt;/a&#62;</font>创建链接文本（被点击的）（拉关系）  <font color=#008000>&lt;a href=”#two”&#62;</font>链接文本<font color=#008000>&lt;/a&#62;</font></p>
</blockquote>
<h5 id="6-base标签"><a href="#6-base标签" class="headerlink" title="6.base标签"></a>6.base标签</h5><hr />
语法：

<blockquote>
<p><font color=#008000>&lt;base target=”_blank”/&#62;</font></p>
</blockquote>
<ol>
<li>base可以设置整体链接的打开状态</li>
<li>base写到&lt;head&#62;&lt;head/&#62;之间</li>
<li>把所有的链接都默认设置添加target=”_blank”</li>
</ol>
<h5 id="7-什么是XHTML"><a href="#7-什么是XHTML" class="headerlink" title="7.什么是XHTML"></a>7.什么是XHTML</h5><p>XHTML是更严格更纯净的HTML代码。</p>
<ul>
<li>XHTML指可扩展超文本标签语言</li>
<li>XHTML的目标是取代HTML</li>
<li>XHTML与HTML4.01几乎是相同的</li>
<li>XHTML是更严格更纯净的HTML版本</li>
<li>XHTML是作为一种XML应用被重新定义的HTML</li>
<li>XHTML是一个W3C标准</li>
</ul>
<h6 id="7-1XHTML与HTML有什么区别？"><a href="#7-1XHTML与HTML有什么区别？" class="headerlink" title="7.1XHTML与HTML有什么区别？"></a>7.1XHTML与HTML有什么区别？</h6><ul>
<li>XHTML指的是可扩展超文本标记语言</li>
<li>XHTML与HTML4.0.1几乎是相同的</li>
<li>XHTML是更严格更纯净的HTML版本</li>
<li>XHTML是以XML应用的方式定义的HTML</li>
<li>XHTML是2001年1月发布的w3c推荐标准</li>
<li>XHTML得到所有主流浏览器的支持</li>
<li>XHTML元素是以XML格式编写的HTML元素。XHTML是严格版本的HTML,例如它要求标签必须小写，标签必须正确关闭，标签顺序必须正确排列，对于属性都必须使用双引号等。</li>
</ul>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>html作用</tag>
        <tag>骨架标签</tag>
        <tag>排版标签</tag>
        <tag>文本格式化标签</tag>
        <tag>图像标签</tag>
        <tag>链接标签</tag>
        <tag>相对路径、绝对路径</tag>
        <tag>锚点定位</tag>
        <tag>base标签</tag>
      </tags>
  </entry>
  <entry>
    <title>web标准</title>
    <url>/2019/12/02/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="web标准"><a href="#web标准" class="headerlink" title="web标准"></a>web标准</h4><h5 id="常用浏览器内核"><a href="#常用浏览器内核" class="headerlink" title="常用浏览器内核"></a>常用浏览器内核</h5><table>
<thead>
<tr>
<th>浏览器</th>
<th>内核</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>IE</td>
<td>Trident</td>
<td>IE、猎豹安全、360极速浏览器、百度浏览器</td>
</tr>
<tr>
<td>firefox</td>
<td>Gecko</td>
<td>可惜这几年已经没落了，打开速度极慢、升级频繁、不友好的flash</td>
</tr>
<tr>
<td>safari</td>
<td>webkit</td>
<td>现在很多人错误地把叫做chrome内核（即使现在chrome已经是blink了）</td>
</tr>
<tr>
<td>chrome</td>
<td>chromium/Blink</td>
<td>在Chromium项目中研发Blink渲染引擎，内置于Chrome浏览器之中。Blink其实Webkit的分支。大部分国产浏览器最新版都采用Blink内核，二次开发</td>
</tr>
<tr>
<td>OPera</td>
<td>Blink</td>
<td>现在跟随chrome采用blink内核</td>
</tr>
</tbody></table>
<h5 id="web标准-1"><a href="#web标准-1" class="headerlink" title="web标准"></a>web标准</h5><p>web标准不是某一个标准，而是由W3C组织和其他标准化组织制定的一系列标准的合集。</p>
<p>W3C万维网联盟是国际最著名的标准化组织。1994年成立之后，至今已发布近百项相关万维网标准，对万维网发展做出了重要贡献。</p>
<p>W3C就类似于现实世界中的联合国。</p>
<p>++经典面试题：说出网页中web标准三层组成。++</p>
<p><strong>构成：</strong> 主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p>
<table>
<thead>
<tr>
<th>标准</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>结构</td>
<td>结构用于对网页元素进行整理和分类，主要是HTML</td>
</tr>
<tr>
<td>表现</td>
<td>表现用于设置网页元素的版式、颜色、大小等外观样式，主要使用CSS</td>
</tr>
<tr>
<td>行为</td>
<td>行为是指网页模型的定义及交互的编写，主要使用Javascript</td>
</tr>
</tbody></table>
<h5 id="web标准的好处"><a href="#web标准的好处" class="headerlink" title="web标准的好处"></a>web标准的好处</h5><p>遵循web标准可以让不同我们写的页面更标准更统一外，还有许多优点</p>
<ol>
<li>让web的发展前景更广阔。</li>
<li>内容能被更广泛的设备访问。</li>
<li>更容易被搜索引擎搜索。</li>
<li>降低网站流量费用。</li>
<li>是网站更易于维护</li>
<li>提高页面浏览速度。</li>
</ol>
<h5 id="web标准小结"><a href="#web标准小结" class="headerlink" title="web标准小结"></a>web标准小结</h5><ul>
<li>web标准有三层结构，分别是结构（html）、表现（CSS）、行为（javascript）</li>
<li>结构类似人类的身体，表现类似人的着装，行为类似人的行为动作</li>
<li>理想状态下，他们是三层独立的，放到不同的文件里面。</li>
</ul>
<h5 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h5><p>浏览器内核包括两部分，渲染引擎和JS引擎。渲染引擎负责读取网页内容，整理讯息，计算网页的显示方式并显示页面，JS引擎是解析执行JS获取网页的动态效果。后来js引擎越来越独立，内核就倾向于只指渲染引擎。</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>浏览器内核</tag>
        <tag>web标准</tag>
        <tag>web标准三层组成</tag>
      </tags>
  </entry>
</search>
